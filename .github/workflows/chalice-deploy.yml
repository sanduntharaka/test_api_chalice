name: Deploy Chalice Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: eu-central-1
  PYTHON_VERSION: '3.9'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install chalice awscli python-dotenv supabase
          pip install -r requirements.txt

      # Update Chalice config with environment variables
      - name: Update Chalice config
        run: |
          CONFIG_FILE=.chalice/config.json

          python - <<EOF
          import json
          import os

          # Load existing Chalice configuration
          with open('$CONFIG_FILE', 'r') as f:
              config = json.load(f)

          # Update environment variables for the stage
          stage = "dev"  # Replace with "prod" for production
          if 'stages' not in config:
              config['stages'] = {}
          if stage not in config['stages']:
              config['stages'][stage] = {}
          if 'environment_variables' not in config['stages'][stage]:
              config['stages'][stage]['environment_variables'] = {}

          # Set environment variables
          config['stages'][stage]['environment_variables'].update({
              'SUPABASE_URL': '${{ secrets.SUPABASE_URL }}',
              'SUPABASE_KEY': '${{ secrets.SUPABASE_KEY }}'
          })

          # Save updated configuration
          with open('$CONFIG_FILE', 'w') as f:
              json.dump(config, f, indent=2)
          EOF

      # Deploy Chalice application
      - name: Deploy Chalice Application
        id: deploy
        run: |
          chalice deploy || exit 1

          # Extract and log API Gateway URL
          API_URL=$(cat .chalice/deployed/dev.json | jq -r '.resources[] | select(.resource_type=="rest_api") | .rest_api_url')
          echo "Deployed API URL: $API_URL"
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      # Save deployment artifacts
      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: chalice-deployment
          path: .chalice/deployed/dev.json
